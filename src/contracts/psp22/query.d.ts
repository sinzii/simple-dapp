// Generated by dedot cli

import type { GenericSubstrateApi } from "dedot/types";
import type { AccountId32Like, Result, BytesLike, Bytes } from "dedot/codecs";
import type {
  GenericContractQuery,
  GenericContractQueryCall,
  ContractCallOptions,
  GenericContractCallResult,
  ContractCallResult,
} from "dedot/contracts";
import type {
  InkPrimitivesLangError,
  OpenbrushContractsErrorsPsp22Psp22Error,
} from "./types";

export interface ContractQuery<ChainApi extends GenericSubstrateApi>
  extends GenericContractQuery<ChainApi> {
  /**
   * Returns the account Balance for the specified `owner`.
   *
   * Returns `0` if the account is non-existent.
   *
   * @param {AccountId32Like} owner
   * @param {ContractCallOptions} options
   *
   * @selector 0x6568382f
   **/
  psp22BalanceOf: GenericContractQueryCall<
    ChainApi,
    (
      owner: AccountId32Like,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<bigint, InkPrimitivesLangError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Transfers `value` tokens on the behalf of `from` to the account `to`
   * with additional `data` in unspecified format.
   *
   * This can be used to allow a contract to transfer tokens on ones behalf and/or
   * to charge fees in sub-currencies, for example.
   *
   * On success a `Transfer` and `Approval` events are emitted.
   *
   * # Errors
   *
   * Returns `InsufficientAllowance` error if there are not enough tokens allowed
   * for the caller to withdraw from `from`.
   *
   * Returns `InsufficientBalance` error if there are not enough tokens on
   * the the account Balance of `from`.
   *
   * Returns `ZeroSenderAddress` error if sender's address is zero.
   *
   * Returns `ZeroRecipientAddress` error if recipient's address is zero.
   *
   * @param {AccountId32Like} from
   * @param {AccountId32Like} to
   * @param {bigint} value
   * @param {BytesLike} data
   * @param {ContractCallOptions} options
   *
   * @selector 0x54b3c76e
   **/
  psp22TransferFrom: GenericContractQueryCall<
    ChainApi,
    (
      from: AccountId32Like,
      to: AccountId32Like,
      value: bigint,
      data: BytesLike,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<
          Result<[], OpenbrushContractsErrorsPsp22Psp22Error>,
          InkPrimitivesLangError
        >,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Transfers `value` amount of tokens from the caller's account to account `to`
   * with additional `data` in unspecified format.
   *
   * On success a `Transfer` event is emitted.
   *
   * # Errors
   *
   * Returns `InsufficientBalance` error if there are not enough tokens on
   * the caller's account Balance.
   *
   * Returns `ZeroSenderAddress` error if sender's address is zero.
   *
   * Returns `ZeroRecipientAddress` error if recipient's address is zero.
   *
   * @param {AccountId32Like} to
   * @param {bigint} value
   * @param {BytesLike} data
   * @param {ContractCallOptions} options
   *
   * @selector 0xdb20f9f5
   **/
  psp22Transfer: GenericContractQueryCall<
    ChainApi,
    (
      to: AccountId32Like,
      value: bigint,
      data: BytesLike,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<
          Result<[], OpenbrushContractsErrorsPsp22Psp22Error>,
          InkPrimitivesLangError
        >,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Allows `spender` to withdraw from the caller's account multiple times, up to
   * the `value` amount.
   *
   * If this function is called again it overwrites the current allowance with `value`.
   *
   * An `Approval` event is emitted.
   *
   * # Errors
   *
   * Returns `ZeroSenderAddress` error if sender's address is zero.
   *
   * Returns `ZeroRecipientAddress` error if recipient's address is zero.
   *
   * @param {AccountId32Like} spender
   * @param {bigint} value
   * @param {ContractCallOptions} options
   *
   * @selector 0xb20f1bbd
   **/
  psp22Approve: GenericContractQueryCall<
    ChainApi,
    (
      spender: AccountId32Like,
      value: bigint,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<
          Result<[], OpenbrushContractsErrorsPsp22Psp22Error>,
          InkPrimitivesLangError
        >,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Returns the total token supply.
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0x162df8c2
   **/
  psp22TotalSupply: GenericContractQueryCall<
    ChainApi,
    (
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<bigint, InkPrimitivesLangError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Atomically increases the allowance granted to `spender` by the caller.
   *
   * An `Approval` event is emitted.
   *
   * # Errors
   *
   * Returns `ZeroSenderAddress` error if sender's address is zero.
   *
   * Returns `ZeroRecipientAddress` error if recipient's address is zero.
   *
   * @param {AccountId32Like} spender
   * @param {bigint} deltaValue
   * @param {ContractCallOptions} options
   *
   * @selector 0x96d6b57a
   **/
  psp22IncreaseAllowance: GenericContractQueryCall<
    ChainApi,
    (
      spender: AccountId32Like,
      deltaValue: bigint,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<
          Result<[], OpenbrushContractsErrorsPsp22Psp22Error>,
          InkPrimitivesLangError
        >,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Atomically decreases the allowance granted to `spender` by the caller.
   *
   * An `Approval` event is emitted.
   *
   * # Errors
   *
   * Returns `InsufficientAllowance` error if there are not enough tokens allowed
   * by owner for `spender`.
   *
   * Returns `ZeroSenderAddress` error if sender's address is zero.
   *
   * Returns `ZeroRecipientAddress` error if recipient's address is zero.
   *
   * @param {AccountId32Like} spender
   * @param {bigint} deltaValue
   * @param {ContractCallOptions} options
   *
   * @selector 0xfecb57d5
   **/
  psp22DecreaseAllowance: GenericContractQueryCall<
    ChainApi,
    (
      spender: AccountId32Like,
      deltaValue: bigint,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<
          Result<[], OpenbrushContractsErrorsPsp22Psp22Error>,
          InkPrimitivesLangError
        >,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Returns the amount which `spender` is still allowed to withdraw from `owner`.
   *
   * Returns `0` if no allowance has been set `0`.
   *
   * @param {AccountId32Like} owner
   * @param {AccountId32Like} spender
   * @param {ContractCallOptions} options
   *
   * @selector 0x4d47d921
   **/
  psp22Allowance: GenericContractQueryCall<
    ChainApi,
    (
      owner: AccountId32Like,
      spender: AccountId32Like,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<bigint, InkPrimitivesLangError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Returns the token decimals.
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0x7271b782
   **/
  psp22MetadataTokenDecimals: GenericContractQueryCall<
    ChainApi,
    (
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<number, InkPrimitivesLangError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Returns the token name.
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0x3d261bd4
   **/
  psp22MetadataTokenName: GenericContractQueryCall<
    ChainApi,
    (
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<Bytes | undefined, InkPrimitivesLangError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Returns the token symbol.
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0x34205be5
   **/
  psp22MetadataTokenSymbol: GenericContractQueryCall<
    ChainApi,
    (
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<Bytes | undefined, InkPrimitivesLangError>,
        ContractCallResult<ChainApi>
      >
    >
  >;
}
