// Generated by dedot cli

import type { GenericSubstrateApi } from "dedot/types";
import type { AccountId32Like, BytesLike } from "dedot/codecs";
import type {
  GenericContractTx,
  GenericContractTxCall,
  ContractTxOptions,
  ContractSubmittableExtrinsic,
} from "dedot/contracts";

export interface ContractTx<ChainApi extends GenericSubstrateApi>
  extends GenericContractTx<ChainApi> {
  /**
   * Transfers `value` tokens on the behalf of `from` to the account `to`
   * with additional `data` in unspecified format.
   *
   * This can be used to allow a contract to transfer tokens on ones behalf and/or
   * to charge fees in sub-currencies, for example.
   *
   * On success a `Transfer` and `Approval` events are emitted.
   *
   * # Errors
   *
   * Returns `InsufficientAllowance` error if there are not enough tokens allowed
   * for the caller to withdraw from `from`.
   *
   * Returns `InsufficientBalance` error if there are not enough tokens on
   * the the account Balance of `from`.
   *
   * Returns `ZeroSenderAddress` error if sender's address is zero.
   *
   * Returns `ZeroRecipientAddress` error if recipient's address is zero.
   *
   * @param {AccountId32Like} from
   * @param {AccountId32Like} to
   * @param {bigint} value
   * @param {BytesLike} data
   * @param {ContractTxOptions} options
   *
   * @selector 0x54b3c76e
   **/
  psp22TransferFrom: GenericContractTxCall<
    ChainApi,
    (
      from: AccountId32Like,
      to: AccountId32Like,
      value: bigint,
      data: BytesLike,
      options: ContractTxOptions,
    ) => ContractSubmittableExtrinsic<ChainApi>
  >;

  /**
   * Transfers `value` amount of tokens from the caller's account to account `to`
   * with additional `data` in unspecified format.
   *
   * On success a `Transfer` event is emitted.
   *
   * # Errors
   *
   * Returns `InsufficientBalance` error if there are not enough tokens on
   * the caller's account Balance.
   *
   * Returns `ZeroSenderAddress` error if sender's address is zero.
   *
   * Returns `ZeroRecipientAddress` error if recipient's address is zero.
   *
   * @param {AccountId32Like} to
   * @param {bigint} value
   * @param {BytesLike} data
   * @param {ContractTxOptions} options
   *
   * @selector 0xdb20f9f5
   **/
  psp22Transfer: GenericContractTxCall<
    ChainApi,
    (
      to: AccountId32Like,
      value: bigint,
      data: BytesLike,
      options: ContractTxOptions,
    ) => ContractSubmittableExtrinsic<ChainApi>
  >;

  /**
   * Allows `spender` to withdraw from the caller's account multiple times, up to
   * the `value` amount.
   *
   * If this function is called again it overwrites the current allowance with `value`.
   *
   * An `Approval` event is emitted.
   *
   * # Errors
   *
   * Returns `ZeroSenderAddress` error if sender's address is zero.
   *
   * Returns `ZeroRecipientAddress` error if recipient's address is zero.
   *
   * @param {AccountId32Like} spender
   * @param {bigint} value
   * @param {ContractTxOptions} options
   *
   * @selector 0xb20f1bbd
   **/
  psp22Approve: GenericContractTxCall<
    ChainApi,
    (
      spender: AccountId32Like,
      value: bigint,
      options: ContractTxOptions,
    ) => ContractSubmittableExtrinsic<ChainApi>
  >;

  /**
   * Atomically increases the allowance granted to `spender` by the caller.
   *
   * An `Approval` event is emitted.
   *
   * # Errors
   *
   * Returns `ZeroSenderAddress` error if sender's address is zero.
   *
   * Returns `ZeroRecipientAddress` error if recipient's address is zero.
   *
   * @param {AccountId32Like} spender
   * @param {bigint} deltaValue
   * @param {ContractTxOptions} options
   *
   * @selector 0x96d6b57a
   **/
  psp22IncreaseAllowance: GenericContractTxCall<
    ChainApi,
    (
      spender: AccountId32Like,
      deltaValue: bigint,
      options: ContractTxOptions,
    ) => ContractSubmittableExtrinsic<ChainApi>
  >;

  /**
   * Atomically decreases the allowance granted to `spender` by the caller.
   *
   * An `Approval` event is emitted.
   *
   * # Errors
   *
   * Returns `InsufficientAllowance` error if there are not enough tokens allowed
   * by owner for `spender`.
   *
   * Returns `ZeroSenderAddress` error if sender's address is zero.
   *
   * Returns `ZeroRecipientAddress` error if recipient's address is zero.
   *
   * @param {AccountId32Like} spender
   * @param {bigint} deltaValue
   * @param {ContractTxOptions} options
   *
   * @selector 0xfecb57d5
   **/
  psp22DecreaseAllowance: GenericContractTxCall<
    ChainApi,
    (
      spender: AccountId32Like,
      deltaValue: bigint,
      options: ContractTxOptions,
    ) => ContractSubmittableExtrinsic<ChainApi>
  >;
}
